#include<bits/stdc++.h>
using namespace std;

//20190303

//动态内存管理
//malloc动态申请内存/free释放内存
//malloc申请内存失败会返回0
////  void* malloc (size_t size)比特位
//只申请不释放会经常出现内存泄露问题(智能指针能够缓解问题)
//（java中的自动垃圾回收机制 GC）
//calloc 也是用free 释放内存

//realloc 能够对malloc/calloc 申请的内存进行扩容，
//1.如果该内存后面的空间足够容纳扩容后的空间，就直接扩容，
//2.如果该内存后面的空间不够了，另外找一段连续的足够容纳
//的内存空间，把原内存空间的数据拷贝到新的空间内，并且
//释放原有内存空间

//main返回值不为0则表示出错
//free不能单独使用，必须保证释放一个动态内存

//堆空间很大，
//栈空间很小
//
//栈上申请一段内存，效率极高，速度极快
//堆上申请一段内存，效率极低。
//
//高地址：
//		栈
//		堆
//        数据段
//        代码段
//低地址：











int main()
{
	return 0;
}
